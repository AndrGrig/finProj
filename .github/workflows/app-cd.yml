name: Application_CD

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'helm/**'
      - '.github/workflows/app-cd.yml'
  workflow_run:
    workflows: ["Application_CI", "Terraform_Infra", "K8S_Deployment"]
    types:
      - completed

jobs:
  deploy:
    runs-on: self-hosted
    if: github.event_name == 'push' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Add SSH Key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Get latest successful workflow run ID
      run: |
        # Fetch the latest successful workflow run using GitHub API
        response=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GIT_PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/terraform-infra.yml/runs?status=success&per_page=1")

        # Extract the latest successful run ID
        latest_run_id=$(echo $response | jq -r '.workflow_runs[0].id')

        if [ "$latest_run_id" != "null" ]; then
          echo "Latest Successful Run ID of terraform-infra workflow: $latest_run_id"
          echo "LATEST_RUN_ID=$latest_run_id" >> $GITHUB_ENV
        else
          echo "No successful runs found for terraform-infra workflow."
          exit 1
        fi
        
        echo "Latest Successful Run ID: $latest_run_id"

    - name: Download ec2-ip artifact from first workflow
      uses: actions/download-artifact@v4
      with:
        github-token: ${{ secrets.GIT_PAT }}
        run-id: ${{ env.LATEST_RUN_ID }}
        name: ec2-ip

    - name: Read parameters from the file and get EC2 IP
      run: |
        EC2_IP=$(cat ec2_ip.txt | tr -d '\n\r')
        echo "EC2_IP=${EC2_IP}" >> $GITHUB_ENV
        echo "Found EC2 IP: ${EC2_IP}"

    - name: Download volume-id artifact from first workflow
      uses: actions/download-artifact@v4
      with:
        github-token: ${{ secrets.GIT_PAT }}
        run-id: ${{ env.LATEST_RUN_ID }}
        name: volume-id

    - name: Read parameters from the file and get VOLUME ID
      run: |
        VOLUME_ID=$(cat volume_id.txt | tr -d '\n\r')
        echo "VOLUME_ID=${VOLUME_ID}" >> $GITHUB_ENV
        echo "Found VOLUME ID: ${VOLUME_ID}"


    - name: SSH and install Helm
      uses: appleboy/ssh-action@v1.2.0
      env:
          EC2_IP: ${{ env.EC2_IP }}
      with:
          host: ${{ env.EC2_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Install Helm
            curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
            chmod +x get_helm.sh
            ./get_helm.sh
            helm version

            # Create directory for charts
            rm -rf ~/helm-charts
            mkdir -p ~/helm-charts

    - name: Copy Helm Charts to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ env.EC2_IP }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        source: "helm/*"
        target: "~/helm-charts"
      
    - name: Get Version
      id: get_version
      run: |
        VERSION=$(cat App/VERSION)
        echo "version=$VERSION" >> $GITHUB_ENV

    - name: Helm install Applications
      uses: appleboy/ssh-action@v1.2.0
      env:
          EC2_IP: ${{ env.EC2_IP }}
      with:
          host: ${{ env.EC2_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Deploy MySQL
            pwd
            cd ~/helm-charts/helm
            pwd;ls -la
            echo "before installation"
            ls -la mysql/
            mv mysql/chart.yaml mysql/Chart.yaml
            mv python-app/chart.yaml python-app/Chart.yaml
            ls -la mysql/
            ls -la python-app/
            helm upgrade --install mysql mysql --set mysql.rootPassword=mysecurepassword \
              --set ebs.volumeId=${{ env.VOLUME_ID }}

            # Deploy Python App 
            helm upgrade --install python-app python-app \
              --set image.repository=${{ secrets.DOCKER_HUB_USERNAME }}/flask-app \
              --set image.tag=${{ env.version }}

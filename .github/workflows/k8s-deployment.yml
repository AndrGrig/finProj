name: K8S_Deployment

on:
  push:
    paths:
      - '.github/workflows/k8s-deployment.yml'
      - 'terraform_cd/**'
  workflow_run:
    workflows: ["Terraform_Infra"]
    types:
      - completed  # Trigger when the Terraform_Infra workflow is completed

jobs:
  deploy:
    runs-on: self-hosted
    
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Download parameter artifact from first workflow
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GIT_PAT }}
          run-id: ${{ github.event.workflow_run.id }}
          name: ec2-ip

      - name: Read parameters from the file and Get EC2 IP
        run: |
          EC2_IP=$(cat ec2_ip.txt | tr -d '\n\r')
          echo "EC2_IP=${EC2_IP}" >> $GITHUB_ENV
          echo "Found EC2 IP: ${EC2_IP}"
      
      - name: Install Kind on EC2
        uses: appleboy/ssh-action@v1.2.0
        env:
          EC2_IP: ${{ env.EC2_IP }}
        with:
          host: ${{ env.EC2_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            sudo yum update -y

            # Install git
            sudo yum install -y git

            # Install Docker
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
            newgrp docker
            sudo chmod 666 /var/run/docker.sock

            # Install Kind
            curl -Lo ./kind https://kind.sigs.k8s.io/dl/latest/kind-linux-amd64
            chmod +x ./kind
            sudo mv ./kind /usr/local/bin/kind

            # Install kubectl
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/kubectl

            # Verify kubectl installation
            kubectl version --client

            # Create a Kind cluster
            kind create cluster --name kind-cluster --config - <<EOF
            kind: Cluster
            apiVersion: kind.x-k8s.io/v1alpha4
            nodes:
            - role: control-plane
              extraPortMappings:
              - containerPort: 80
                hostPort: 80
              - containerPort: 443
                hostPort: 443
              - containerPort: 30080
                hostPort: 30080
                protocol: TCP
            EOF

            # Verify cluster
            kubectl cluster-info --context kind-kind-cluster

            # Install aws-ebs-csi driver
            kubectl apply -k "github.com/kubernetes-sigs/aws-ebs-csi-driver/deploy/kubernetes/overlays/stable/?ref=master"